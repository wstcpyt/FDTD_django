// Generated by CoffeeScript 1.9.2
(function() {
  "use strict";
  var sinon;

  sinon = require("sinon");

  describe("Call count", function() {
    var spy;
    spy = null;
    beforeEach(function() {
      return spy = sinon.spy();
    });
    describe("called", function() {
      it("should throw an assertion error when the spy is not called", function() {
        return expect(function() {
          return spy.should.have.been.called;
        }).to["throw"](AssertionError);
      });
      it("should not throw when the spy is called once", function() {
        spy();
        return expect(function() {
          return spy.should.have.been.called;
        }).to.not["throw"]();
      });
      return it("should not throw when the spy is called twice", function() {
        spy();
        spy();
        return expect(function() {
          return spy.should.have.been.called;
        }).to.not["throw"]();
      });
    });
    describe("not called", function() {
      it("should not throw when the spy is not called", function() {
        return expect(function() {
          return spy.should.not.have.been.called;
        }).to.not["throw"]();
      });
      return it("should throw an assertion error when the spy is called once", function() {
        spy();
        return expect(function() {
          return spy.should.not.have.been.called;
        }).to["throw"](AssertionError);
      });
    });
    describe("callCount", function() {
      it("should throw an assertion error when the spy is not called", function() {
        return expect(function() {
          return spy.should.have.callCount();
        }).to["throw"](AssertionError);
      });
      it("should not throw an assertion error when the number of calls equals provided call count", function() {
        spy();
        spy();
        spy();
        spy();
        return expect(function() {
          return spy.should.have.callCount(4);
        }).to.not["throw"](AssertionError);
      });
      return it("should throw an assertion error whenever the number of calls are not equal to provided call count", function() {
        spy();
        spy();
        spy();
        return expect(function() {
          return spy.should.have.callCount(4);
        }).to["throw"](AssertionError);
      });
    });
    describe("calledOnce", function() {
      it("should throw an assertion error when the spy is not called", function() {
        return expect(function() {
          return spy.should.have.been.calledOnce;
        }).to["throw"](AssertionError);
      });
      it("should not throw when the spy is called once", function() {
        spy();
        return expect(function() {
          return spy.should.have.been.calledOnce;
        }).to.not["throw"]();
      });
      return it("should throw an assertion error when the spy is called twice", function() {
        spy();
        spy();
        return expect(function() {
          return spy.should.have.been.calledOnce;
        }).to["throw"](AssertionError);
      });
    });
    describe("calledTwice", function() {
      it("should throw an assertion error when the spy is not called", function() {
        return expect(function() {
          return spy.should.have.been.calledTwice;
        }).to["throw"](AssertionError);
      });
      it("should throw an assertion error when the spy is called once", function() {
        spy();
        return expect(function() {
          return spy.should.have.been.calledTwice;
        }).to["throw"](AssertionError);
      });
      it("should not throw when the spy is called twice", function() {
        spy();
        spy();
        return expect(function() {
          return spy.should.have.been.calledTwice;
        }).to.not["throw"]();
      });
      return it("should throw an assertion error when the spy is called thrice", function() {
        spy();
        spy();
        spy();
        return expect(function() {
          return spy.should.have.been.calledTwice;
        }).to["throw"](AssertionError);
      });
    });
    return describe("calledThrice", function() {
      it("should throw an assertion error when the spy is not called", function() {
        return expect(function() {
          return spy.should.have.been.calledThrice;
        }).to["throw"](AssertionError);
      });
      it("should throw an assertion error when the spy is called once", function() {
        spy();
        return expect(function() {
          return spy.should.have.been.calledThrice;
        }).to["throw"](AssertionError);
      });
      it("should throw an assertion error when the spy is called twice", function() {
        spy();
        spy();
        return expect(function() {
          return spy.should.have.been.calledThrice;
        }).to["throw"](AssertionError);
      });
      it("should not throw when the spy is called thrice", function() {
        spy();
        spy();
        spy();
        return expect(function() {
          return spy.should.have.been.calledThrice;
        }).to.not["throw"]();
      });
      return it("should throw an assertion error when the spy is called four times", function() {
        spy();
        spy();
        spy();
        spy();
        return expect(function() {
          return spy.should.have.been.calledThrice;
        }).to["throw"](AssertionError);
      });
    });
  });

}).call(this);

//# sourceMappingURL=callCount.js.map
