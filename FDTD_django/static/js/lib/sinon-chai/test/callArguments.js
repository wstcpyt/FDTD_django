// Generated by CoffeeScript 1.9.2
(function() {
  "use strict";
  var sinon;

  sinon = require("sinon");

  describe("Call arguments", function() {
    var any, arg1, arg2, notArg, spy;
    spy = null;
    arg1 = null;
    arg2 = null;
    notArg = null;
    any = null;
    beforeEach(function() {
      spy = sinon.spy();
      arg1 = "A";
      arg2 = "B";
      notArg = "C";
      return any = sinon.match.any;
    });
    describe("calledWith", function() {
      it("should throw an assertion error when the spy is not called", function() {
        return expect(function() {
          return spy.should.have.been.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      it("should not throw when the spy is called with the correct arguments", function() {
        spy(arg1, arg2);
        expect(function() {
          return spy.should.have.been.calledWith(arg1, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.getCall(0).should.have.been.calledWith(arg1, arg2);
        }).to.not["throw"]();
      });
      it("should not throw when the spy is called with the correct arguments and more", function() {
        spy(arg1, arg2, notArg);
        expect(function() {
          return spy.should.have.been.calledWith(arg1, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.getCall(0).should.have.been.calledWith(arg1, arg2);
        }).to.not["throw"]();
      });
      it("should throw an assertion error when the spy is called with incorrect arguments", function() {
        spy(notArg, arg1);
        expect(function() {
          return spy.should.have.been.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.getCall(0).should.have.been.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      return it("should not throw when the spy is called with incorrect arguments but then correct ones", function() {
        spy(notArg, arg1);
        spy(arg1, arg2);
        expect(function() {
          return spy.should.have.been.calledWith(arg1, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.getCall(1).should.have.been.calledWith(arg1, arg2);
        }).to.not["throw"]();
      });
    });
    describe("always calledWith", function() {
      it("should throw an assertion error when the spy is not called", function() {
        expect(function() {
          return spy.should.always.have.been.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
        expect(function() {
          return spy.should.have.always.been.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.should.have.been.always.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      it("should not throw when the spy is called with the correct arguments", function() {
        spy(arg1, arg2);
        expect(function() {
          return spy.should.always.have.been.calledWith(arg1, arg2);
        }).to.not["throw"]();
        expect(function() {
          return spy.should.have.always.been.calledWith(arg1, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.should.have.been.always.calledWith(arg1, arg2);
        }).to.not["throw"]();
      });
      it("should not throw when the spy is called with the correct arguments and more", function() {
        spy(arg1, arg2, notArg);
        expect(function() {
          return spy.should.always.have.been.calledWith(arg1, arg2);
        }).to.not["throw"]();
        expect(function() {
          return spy.should.have.always.been.calledWith(arg1, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.should.have.been.always.calledWith(arg1, arg2);
        }).to.not["throw"]();
      });
      it("should throw an assertion error when the spy is called with incorrect arguments", function() {
        spy(notArg, arg1);
        expect(function() {
          return spy.should.always.have.been.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
        expect(function() {
          return spy.should.have.always.been.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.should.have.been.always.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      return it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones", function() {
        spy(notArg, arg1);
        spy(arg1, arg2);
        expect(function() {
          return spy.should.always.have.been.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
        expect(function() {
          return spy.should.have.always.been.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.should.have.been.always.calledWith(arg1, arg2);
        }).to["throw"](AssertionError);
      });
    });
    describe("calledWithExactly", function() {
      it("should throw an assertion error when the spy is not called", function() {
        return expect(function() {
          return spy.should.have.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      it("should not throw when the spy is called with the correct arguments", function() {
        spy(arg1, arg2);
        expect(function() {
          return spy.should.have.been.calledWithExactly(arg1, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.getCall(0).should.have.been.calledWithExactly(arg1, arg2);
        }).to.not["throw"]();
      });
      it("should throw an assertion error when the spy is called with the correct arguments and more", function() {
        spy(arg1, arg2, notArg);
        expect(function() {
          return spy.should.have.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.getCall(0).should.have.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      it("should throw an assertion error when the spy is called with incorrect arguments", function() {
        spy(notArg, arg1);
        expect(function() {
          return spy.should.have.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.getCall(0).should.have.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      return it("should not throw when the spy is called with incorrect arguments but then correct ones", function() {
        spy(notArg, arg1);
        spy(arg1, arg2);
        expect(function() {
          return spy.should.have.been.calledWithExactly(arg1, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.getCall(1).should.have.been.calledWithExactly(arg1, arg2);
        }).to.not["throw"]();
      });
    });
    describe("always calledWithExactly", function() {
      it("should throw an assertion error when the spy is not called", function() {
        expect(function() {
          return spy.should.always.have.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
        expect(function() {
          return spy.should.have.always.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.should.have.been.always.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      it("should not throw when the spy is called with the correct arguments", function() {
        spy(arg1, arg2);
        expect(function() {
          return spy.should.always.have.been.calledWithExactly(arg1, arg2);
        }).to.not["throw"]();
        expect(function() {
          return spy.should.have.always.been.calledWithExactly(arg1, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.should.have.been.always.calledWithExactly(arg1, arg2);
        }).to.not["throw"]();
      });
      it("should throw an assertion error when the spy is called with the correct arguments and more", function() {
        spy(arg1, arg2, notArg);
        expect(function() {
          return spy.should.always.have.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
        expect(function() {
          return spy.should.have.always.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.should.have.been.always.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      it("should throw an assertion error when the spy is called with incorrect arguments", function() {
        spy(notArg, arg1);
        expect(function() {
          return spy.should.always.have.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
        expect(function() {
          return spy.should.have.always.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.should.have.been.always.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      return it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones", function() {
        spy(notArg, arg1);
        spy(arg1, arg2);
        expect(function() {
          return spy.should.always.have.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
        expect(function() {
          return spy.should.have.always.been.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.should.have.been.always.calledWithExactly(arg1, arg2);
        }).to["throw"](AssertionError);
      });
    });
    describe("calledWithMatch", function() {
      it("should throw an assertion error when the spy is not called", function() {
        return expect(function() {
          return spy.should.have.been.calledWithMatch(any, any);
        }).to["throw"](AssertionError);
      });
      it("should not throw when the spy is called with the correct arguments", function() {
        spy(arg1, arg2);
        expect(function() {
          return spy.should.have.been.calledWithMatch(any, any);
        }).to.not["throw"]();
        return expect(function() {
          return spy.getCall(0).should.have.been.calledWithMatch(any, any);
        }).to.not["throw"]();
      });
      it("should not throw when the spy is called with the correct arguments and more", function() {
        spy(arg1, arg2, notArg);
        expect(function() {
          return spy.should.have.been.calledWithMatch(any, any);
        }).to.not["throw"]();
        return expect(function() {
          return spy.getCall(0).should.have.been.calledWithMatch(any, any);
        }).to.not["throw"]();
      });
      it("should throw an assertion error when the spy is called with incorrect arguments", function() {
        spy(notArg, arg1);
        expect(function() {
          return spy.should.have.been.calledWithMatch(any, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.getCall(0).should.have.been.calledWithMatch(arg1, any);
        }).to["throw"](AssertionError);
      });
      return it("should not throw when the spy is called with incorrect arguments but then correct ones", function() {
        spy(notArg, arg1);
        spy(arg1, arg2);
        expect(function() {
          return spy.should.have.been.calledWithMatch(arg1, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.getCall(1).should.have.been.calledWithMatch(arg1, arg2);
        }).to.not["throw"]();
      });
    });
    return describe("always calledWithMatch", function() {
      it("should throw an assertion error when the spy is not called", function() {
        expect(function() {
          return spy.should.always.have.been.calledWithMatch(any, any);
        }).to["throw"](AssertionError);
        expect(function() {
          return spy.should.have.always.been.calledWithMatch(arg1, any);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.should.have.been.always.calledWithMatch(any, arg2);
        }).to["throw"](AssertionError);
      });
      it("should not throw when the spy is called with the correct arguments", function() {
        spy(arg1, arg2);
        expect(function() {
          return spy.should.always.have.been.calledWithMatch(any, any);
        }).to.not["throw"]();
        expect(function() {
          return spy.should.have.always.been.calledWithMatch(any, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.should.have.been.always.calledWithMatch(arg1, any);
        }).to.not["throw"]();
      });
      it("should not throw when the spy is called with the correct arguments and more", function() {
        spy(arg1, arg2, notArg);
        expect(function() {
          return spy.should.always.have.been.calledWithMatch(any, any);
        }).to.not["throw"]();
        expect(function() {
          return spy.should.have.always.been.calledWithMatch(any, arg2);
        }).to.not["throw"]();
        return expect(function() {
          return spy.should.have.been.always.calledWithMatch(arg1, any);
        }).to.not["throw"]();
      });
      it("should throw an assertion error when the spy is called with incorrect arguments", function() {
        spy(notArg, arg1);
        expect(function() {
          return spy.should.always.have.been.calledWithMatch(any, arg2);
        }).to["throw"](AssertionError);
        expect(function() {
          return spy.should.have.always.been.calledWithMatch(arg1, any);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.should.have.been.always.calledWithMatch(arg1, arg2);
        }).to["throw"](AssertionError);
      });
      return it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones", function() {
        spy(notArg, arg1);
        spy(arg1, arg2);
        expect(function() {
          return spy.should.always.have.been.calledWithMatch(arg1, arg2);
        }).to["throw"](AssertionError);
        expect(function() {
          return spy.should.have.always.been.calledWithMatch(arg1, arg2);
        }).to["throw"](AssertionError);
        return expect(function() {
          return spy.should.have.been.always.calledWithMatch(arg1, arg2);
        }).to["throw"](AssertionError);
      });
    });
  });

}).call(this);

//# sourceMappingURL=callArguments.js.map
